// Code generated by MockGen. DO NOT EDIT.
// Source: ./../../internal/model/model.pb.go

// Package model is a generated GoMock package.
package model

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockisResponse_Result is a mock of isResponse_Result interface
type MockisResponse_Result struct {
	ctrl     *gomock.Controller
	recorder *MockisResponse_ResultMockRecorder
}

// MockisResponse_ResultMockRecorder is the mock recorder for MockisResponse_Result
type MockisResponse_ResultMockRecorder struct {
	mock *MockisResponse_Result
}

// NewMockisResponse_Result creates a new mock instance
func NewMockisResponse_Result(ctrl *gomock.Controller) *MockisResponse_Result {
	mock := &MockisResponse_Result{ctrl: ctrl}
	mock.recorder = &MockisResponse_ResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisResponse_Result) EXPECT() *MockisResponse_ResultMockRecorder {
	return m.recorder
}

// isResponse_Result mocks base method
func (m *MockisResponse_Result) isResponse_Result() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isResponse_Result")
}

// isResponse_Result indicates an expected call of isResponse_Result
func (mr *MockisResponse_ResultMockRecorder) isResponse_Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isResponse_Result", reflect.TypeOf((*MockisResponse_Result)(nil).isResponse_Result))
}

// MockShopCartClient is a mock of ShopCartClient interface
type MockShopCartClient struct {
	ctrl     *gomock.Controller
	recorder *MockShopCartClientMockRecorder
}

// MockShopCartClientMockRecorder is the mock recorder for MockShopCartClient
type MockShopCartClientMockRecorder struct {
	mock *MockShopCartClient
}

// NewMockShopCartClient creates a new mock instance
func NewMockShopCartClient(ctrl *gomock.Controller) *MockShopCartClient {
	mock := &MockShopCartClient{ctrl: ctrl}
	mock.recorder = &MockShopCartClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockShopCartClient) EXPECT() *MockShopCartClientMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockShopCartClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockShopCartClientMockRecorder) Add(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockShopCartClient)(nil).Add), varargs...)
}

// Get mocks base method
func (m *MockShopCartClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockShopCartClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockShopCartClient)(nil).Get), varargs...)
}

// Update mocks base method
func (m *MockShopCartClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockShopCartClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockShopCartClient)(nil).Update), varargs...)
}

// Remove mocks base method
func (m *MockShopCartClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Remove", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove
func (mr *MockShopCartClientMockRecorder) Remove(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockShopCartClient)(nil).Remove), varargs...)
}

// MockShopCartServer is a mock of ShopCartServer interface
type MockShopCartServer struct {
	ctrl     *gomock.Controller
	recorder *MockShopCartServerMockRecorder
}

// MockShopCartServerMockRecorder is the mock recorder for MockShopCartServer
type MockShopCartServerMockRecorder struct {
	mock *MockShopCartServer
}

// NewMockShopCartServer creates a new mock instance
func NewMockShopCartServer(ctrl *gomock.Controller) *MockShopCartServer {
	mock := &MockShopCartServer{ctrl: ctrl}
	mock.recorder = &MockShopCartServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockShopCartServer) EXPECT() *MockShopCartServerMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockShopCartServer) Add(arg0 context.Context, arg1 *AddRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockShopCartServerMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockShopCartServer)(nil).Add), arg0, arg1)
}

// Get mocks base method
func (m *MockShopCartServer) Get(arg0 context.Context, arg1 *GetRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockShopCartServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockShopCartServer)(nil).Get), arg0, arg1)
}

// Update mocks base method
func (m *MockShopCartServer) Update(arg0 context.Context, arg1 *UpdateRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockShopCartServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockShopCartServer)(nil).Update), arg0, arg1)
}

// Remove mocks base method
func (m *MockShopCartServer) Remove(arg0 context.Context, arg1 *RemoveRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove
func (mr *MockShopCartServerMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockShopCartServer)(nil).Remove), arg0, arg1)
}
